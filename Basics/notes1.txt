1. To get the Python interpreter installed location in windows
   > where python

   To get the version 
   python --version
   
2. indentaion is very important 
   IndentationError: unindent does not match any outer indentation level

3. *args, *kwargs, argv
   *args and **kwargs allow you to pass a variable number of arguments to a function.
   When we do not know before  that how many arguments can be passed to our function by the user so in this case we use these two keywords. 
   *args is used to send a non-keyworded variable length argument list to the function. 

   def test_var_args(f_arg, *argv):
    print "first normal arg:", f_arg
    for arg in argv:
        print "another arg through *argv :", arg

   test_var_args('C#','Python','Go','Scala')

   **kwargs allows you to pass keyworded variable length of arguments to a function.
   You should use **kwargs if you want to handle named arguments in a function.

   def greet_me(**kwargs):
    if kwargs is not None:
        for key, value in kwargs.iteritems():
            print "%s == %s" %(key,value)
   greet_me("kiran")

   Order of using *args **kwargs and formal args
   Eg: some_func(fargs,*args,**kwargs)

