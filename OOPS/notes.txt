Encapsulation is the bundling of data and the methods that act on that data such that access to that data is restricted from outside the bundle
It means that a class publishes methods and attributes "only what are needed" for others to use it.

Getter - returns the value of the instance attribute
Setter - set or change the value of the instance attribute

Use @property decorator in order to create a getter method and @<property_name>.setter in order to create a setter in Python


In Python every object is public 

class ClassOne(object): #creating a class which inherts from the default "object" class, from Python 3 & above it is not necessary to use object
    def __init__(self, p1, p2): # "self" is a reference to the current instance of the class
        self.p1 = p1 
        self.p2 = p2
    
    def square(self, p3):
        print(p3 ** 2)

def __int(self,parammeters): 
class constructor; initializing some variables and the method is called whenever you create a new instance of the class   


obj=ClassOne(2,10)
#creating an object by simply calling the class name and entering the arguments required by the __init__ method in between parentheses 

obj.p1
#accessing the object's attributes

obj.square(4)


getattr(obj, "p1") #getting the value of an attribute 
 
setattr(obj, "ios", "12.1") #setting the value of an attribute 
 
hasattr(obj, "p1") #checking if an object attribute exists 
 
delattr(obj, "p1") #deleting an attribute 


isinstance(obj, ClassOne) #verifying if an object is an instance of a particular class 
 
Inheritance allows programmers to create classes that are built upon existing classes
A class can inherit from another class, which means that in addition to its own attributes and methods.
it also obtain those fromthe class from which it inherits.

A derived / child class is a class created from another existing class, while 
a base / parent class is a class from which other classes are derived.

super() : It allows us to call a method from the parent class


Python doesn't support method overloading when compared to other OO languages.

def product(a, b): 
    p = a * b 
    print(p) 
      
def product(a, b, c): 
    p = a * b*c 
    print(p) 

But Python interpreter will use latest method only.